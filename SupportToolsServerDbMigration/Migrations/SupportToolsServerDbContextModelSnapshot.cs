// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SupportToolsServerDb;

#nullable disable

namespace SupportToolsServerDbMigration.Migrations
{
    [DbContext(typeof(SupportToolsServerDbContext))]
    partial class SupportToolsServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SupportToolsServerDb.Models.ApiKeyByRemoteIpAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RemoteIpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey", "RemoteIpAddress")
                        .IsUnique();

                    b.ToTable("ApiKeysByRemoteIpAddresses");
                });

            modelBuilder.Entity("SupportToolsServerDb.Models.GitData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GitAddress")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("GitIgnoreFileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GitIgnoreFileTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GitData");
                });

            modelBuilder.Entity("SupportToolsServerDb.Models.GitIgnoreFileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GitIgnoreFileTypes");
                });

            modelBuilder.Entity("SupportToolsServerDb.Models.GitData", b =>
                {
                    b.HasOne("SupportToolsServerDb.Models.GitIgnoreFileType", "GitIgnoreFileTypeNavigation")
                        .WithMany("GitData")
                        .HasForeignKey("GitIgnoreFileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GitIgnoreFileTypeNavigation");
                });

            modelBuilder.Entity("SupportToolsServerDb.Models.GitIgnoreFileType", b =>
                {
                    b.Navigation("GitData");
                });
#pragma warning restore 612, 618
        }
    }
}
